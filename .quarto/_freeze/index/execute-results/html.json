{
  "hash": "925e5079fef454bc6ffa98b074c06e3b",
  "result": {
    "markdown": "---\ntitle: \"Pipeline para el Procesamiento del Lenguaje Natural (NPL) a través de la librería spaCy\"\nauthor: \"Mario Camacho\"\ndate: \"08-25-2024\"\ndate-modified: last-modified\ndate-format: \"DD MMMM YYYY\"\nlang: es\n\nexecute:\n    enabled: true\n---\n\n\n# Preproceso\n\n## Ingesta del documento\n\nLeemos el libro El Quijote.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Enviar una solicitud GET a la URL\nresponse = requests.get(\"https://www.gutenberg.org/cache/epub/2000/pg2000.txt\")\n\n# Verificar si la solicitud fue exitosa\nif response.status_code == 200:\n    quijote = response.text\n    # print(\"Éxito al leer el texto.\")\nelse:\n    print(\"Error al leer el texto.\")\n```\n:::\n\n\nNos ocupamos únicamente de los primeros seis capítulos de la primera parte de El Quijote.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n### Inicio del primer capítulo\n\n# Palabra objetivo\npalabra_start = \"Primera parte del ingenioso hidalgo don Quijote de la Mancha\"\n\n# Expresión regular para capturar todo lo que va antes de un patrón de  búsqueda\npatron = re.compile(rf\"{palabra_start}\\s*(.*)\", re.DOTALL)\n\ncoincidencia = patron.search(quijote)\n\nif coincidencia:\n    quijote = coincidencia.group(1) # 0 incluye la palabra del search, 1 no lo incluye\n    console.print(\"[bold]Inicio del primer capítulo:\\n\\n[/bold]\", quijote[:251])\n    # print(\"Inicio del texto:\\n\\n\", quijote[:251])\nelse:\n    console.print(\"[bold]Inicio del texto:\\n\\n[/bold]\", quijote[:251])\n    \n\n### Inicio del sépimo capítulo (y final del sexto)\npalabra_end = \"Capítulo VII\"\n\n# patron = re.compile(rf\"(.*)\\b{re.escape(palabra_end)}\\b\", re.DOTALL) # .* es codicioso (\"greedy\"): captura la mayor cantidad posible de caracteres antes de la coincidir con la palabra, captura hasta la última aparición de la palabra buscada\npatron = re.compile(rf\"(.*?)\\b{re.escape(palabra_end)}\\b\", re.DOTALL) # .* es no codicioso (\"lazy\"): captura la menor cantidad posible de caracteres y evitar que el resto del texto cooincida, se detiene en la primera coincidencia\n\ncoincidencia = patron.search(quijote)\n\nif coincidencia:\n    quijote = coincidencia.group(0)\n    console.print(\"[bold]Final del sexto capítulo:\\n\\n[/bold]\", quijote[-231:])\n    quijote = coincidencia.group(1) # Elimino el patrón de búsqueda\nelse:\n    console.print(\"[bold]Final del texto:\\n\\n[/bold]\", quijote[-231:])\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Inicio del primer capítulo:</span>\n\n Capítulo primero. Que trata de la condición y ejercicio del famoso hidalgo\ndon Quijote de la Mancha\n\nEn un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho\ntiempo que vivía un hidalgo de los de lanza en astillero, adarga antigua\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Final del sexto capítulo:</span>\n\n o el cura en oyendo el nombre— si tal libro hubiera\nmandado quemar; porque su autor fue uno de los famosos poetas del mundo, no\nsólo de España, y fue felicísimo en la tradución de algunas fábulas de\nOvidio.\n\n\n\n\nCapítulo VII\n</pre>\n```\n:::\n:::\n\n\n## Carga del modelo\n\n### spaCy\n\n**[What’s spaCy?](https://spacy.io/usage/spacy-101#whats-spacy)** spaCy es una biblioteca gratuita de código abierto para el procesamiento avanzado del lenguaje natural en Python.\n\nLa librería spaCy se basa en modelos de aprendizaje automático que se entrenaron con grandes cantidades de datos de texto etiquetados.\n\nDescarga y carga del modelo de lenguaje a través de la librería spaCy:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-fold=\"false\"}\n# !python -m spacy download es_core_news_md\n```\n:::\n\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-fold=\"false\"}\nimport spacy\nnlp = spacy.load(\"es_core_news_md\")\n```\n:::\n\n\n## Fragmentación de la información\n\nPodemos dividir el texto en párrafos.\n\n::: {.cell layout-ncol='3' execution_count=7}\n``` {.python .cell-code}\nfor parrafo in list(nlp(quijote).sents)[:3]: # No es necesario pasarlo a una lista, solo para coger un número de ejemplos\n    console.print(\"[blue]\\nSiguiente párrafo:\\n\\n[/blue]\", parrafo)\n    #print(parrafo)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n<span style=\"color: #000080; text-decoration-color: #000080\">Siguiente párrafo:</span>\n\n Capítulo primero.\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n<span style=\"color: #000080; text-decoration-color: #000080\">Siguiente párrafo:</span>\n\n Que trata de la condición y ejercicio del famoso hidalgo\ndon Quijote de la Mancha\n\nEn un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho\ntiempo que vivía un hidalgo de los de lanza en astillero, adarga antigua,\nrocín flaco y galgo corredor.\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n<span style=\"color: #000080; text-decoration-color: #000080\">Siguiente párrafo:</span>\n\n Una olla de algo más vaca que carnero,\nsalpicón las más noches, duelos y quebrantos los sábados, lantejas los\nviernes, algún palomino de añadidura los domingos, consumían las tres\npartes de su hacienda.\n</pre>\n```\n:::\n:::\n\n\nY los párrafos en palabras.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfor parrafo in list(nlp(quijote).sents)[1:2]:\n    console.print(\"[blue]\\nSiguiente párrafo:\\n[/blue]\")\n    # print(colored(\"\\nSiguiente párrafo:\\n\",'blue'))\n    for palabra in parrafo[:5]:\n        print(palabra)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n<span style=\"color: #000080; text-decoration-color: #000080\">Siguiente párrafo:</span>\n\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nQue\ntrata\nde\nla\ncondición\n```\n:::\n:::\n\n\nY separar cada una de las frases.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndocumento = nlp(quijote)\nsents = list(documento.sents)[:3]\nsents\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n[Capítulo primero.,\n Que trata de la condición y ejercicio del famoso hidalgo\n don Quijote de la Mancha\n \n En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho\n tiempo que vivía un hidalgo de los de lanza en astillero, adarga antigua,\n rocín flaco y galgo corredor.,\n Una olla de algo más vaca que carnero,\n salpicón las más noches, duelos y quebrantos los sábados, lantejas los\n viernes, algún palomino de añadidura los domingos, consumían las tres\n partes de su hacienda.]\n```\n:::\n:::\n\n\n# Pipeline NPL\n\n::: {.cell execution_count=10}\n``` {.python .cell-code code-fold=\"false\"}\ntext = quijote\n```\n:::\n\n\n## Tokenization\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntokens = word_tokenize(text)\nprint(tokens[:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Capítulo', 'primero', '.', 'Que', 'trata', 'de', 'la', 'condición', 'y', 'ejercicio']\n```\n:::\n:::\n\n\n## Stop Words\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nstop_words = set(stopwords.words('spanish'))\ntokens = [w for w in tokens if w.lower() not in stop_words]\ntokens_ejemplos = tokens\nprint(tokens[:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Capítulo', 'primero', '.', 'trata', 'condición', 'ejercicio', 'famoso', 'hidalgo', 'don', 'Quijote']\n```\n:::\n:::\n\n\n## Stemming and Lemmatization\n\nhttps://spacy.io/models/es  \nhttps://github.com/explosion/spacy-models/releases?q=es_core_web_md&expanded=true\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nstemmer = SnowballStemmer(\"spanish\")\ntokens = [stemmer.stem(palabra) for palabra in tokens]\ntokens[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n['capitul',\n 'primer',\n '.',\n 'trat',\n 'condicion',\n 'ejercici',\n 'famos',\n 'hidalg',\n 'don',\n 'quijot']\n```\n:::\n:::\n\n\n## POS Tagging\n\nPart of speech.\n\nEtiqueta las palabras de un texto determinado según sus respectivos tipos de palabras, como sustantivos, adjetivos, adverbios y verbos.\n\nEl etiquetado POS es el proceso de identificar la categoría gramatical (como verbo, sustantivo, adjetivo, etc.) de cada palabra en una oración.\n\nLas etiquetas que spaCy utiliza se basan en el trabajo realizado por Universal Dependencies, un repositorio común que se puede utilizar para entrenar modelos como spaCy. La página de Dependencias universales tiene información sobre [los corpus disponibles para cada idioma](https://universaldependencies.org/).\n\nLas etiquetas (**atributos del token**) que spaCy crea para cada token podemos encontrarlas en <https://spacy.io/api/token#attributes>.\n\nMerece la pena prestar especial atención al atributo *pos_*, que nos permitirá encontrar palabras según su categoría gramatical.\n\n<a href=\"https://universaldependencies.org/u/pos/\" target=\"_blank\" style=\"position: relative; width: 100%; height: 100%; top: 0; left: 0; z-index: 2;\"></a>\n<iframe src=\"https://universaldependencies.org/u/pos/\" width=\"1000px\" height=\"320px\" scrolling=\"yes\" style=\"border: none;\"></iframe>\n\n<div style=\"text-align: center;\">\n<a href=\"https://universaldependencies.org/u/pos/\" target=\"_blank\" style=\"text-decoration: none; color: blue;\">\n    Universal POS tags\n  </a>\n</div>\n\n<span style=\"text-decoration:underline\">**Ejemplo.**</span>\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(\"Token:\", nlp(text)[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nToken: Capítulo\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code code-fold=\"false\"}\npropiedades = ['text', 'lang_', 'pos_', 'is_digit', 'is_lower', 'is_upper', 'is_sent_start', 'is_sent_end',\n               'like_email', 'like_url', # Espero no encontrar ninguna de estas etiquetas en El Quijote\n               'sentiment', 'sent']\n```\n:::\n\n\n::: {.cell collapse='true' execution_count=16}\n``` {.python .cell-code}\nejemplo_01 = nlp(text)[0]\n\nfor attr in propiedades:\n    print(\"obj.%s = %r\" % (attr, getattr(ejemplo_01, attr)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nobj.text = 'Capítulo'\nobj.lang_ = 'es'\nobj.pos_ = 'PROPN'\nobj.is_digit = False\nobj.is_lower = False\nobj.is_upper = False\nobj.is_sent_start = True\nobj.is_sent_end = False\nobj.like_email = False\nobj.like_url = False\nobj.sentiment = 0.0\nobj.sent = Capítulo primero.\n```\n:::\n:::\n\n\n<span style=\"text-decoration:underline\">**Ejemplo.**</span>\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nejemplo_02 = nlp(re.sub(r'[^\\w\\s]', '', text))[:15]\n\n# Encabezado\nprint(f'{\"text\":<12} {\"lemma_\":<12}{\"pos\":<12}{\"pos_\":<12}{\"tag_\":<12}{\"dep_\":<12}{\"shape_\":<12}{\"is_alpha\":<12}{\"is_stop\":<12}')\nprint(\"=\"*12*9)\n\n# Loop que imprime los datos en formato de tabla\nfor token in ejemplo_02:\n    print(f'{token.text:<12} {token.lemma_:<11} {token.pos:<11} {token.pos_:<11} {token.tag_:<11} {token.dep_:<12}'\n          f'{token.shape_:<11} {token.is_alpha:<11} {token.is_stop:<11}')\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntext         lemma_      pos         pos_        tag_        dep_        shape_      is_alpha    is_stop     \n============================================================================================================\nCapítulo     Capítulo    96          PROPN       PROPN       nsubj       Xxxxx       1           0          \nprimero      primero     84          ADJ         ADJ         advmod      xxxx        1           1          \nQue          Que         98          SCONJ       SCONJ       nsubj       Xxx         1           1          \ntrata        tratar      100         VERB        VERB        acl         xxxx        1           1          \nde           de          85          ADP         ADP         case        xx          1           1          \nla           el          90          DET         DET         det         xx          1           1          \ncondición    condición   92          NOUN        NOUN        obj         xxxx        1           0          \ny            y           89          CCONJ       CCONJ       cc          x           1           1          \nejercicio    ejercicio   92          NOUN        NOUN        conj        xxxx        1           0          \ndel          del         85          ADP         ADP         case        xxx         1           1          \nfamoso       famoso      84          ADJ         ADJ         amod        xxxx        1           0          \nhidalgo      hidalgo     92          NOUN        NOUN        nmod        xxxx        1           0          \n\r\n           \r\n          103         SPACE       SPACE       dep         \r\n          0           0          \ndon          don         92          NOUN        NOUN        appos       xxx         1           0          \nQuijote      Quijote     96          PROPN       PROPN       flat        Xxxxx       1           0          \n```\n:::\n:::\n\n\n### Selección de nombres\n\nEn nuestro ejemplo anterior:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nnouns = []\nfor token in ejemplo_02:\n    if token.pos_ == 'NOUN':\n        nouns.append(token.lemma_)\n\nnouns_total = Counter(nouns)\n\ndf = pd.DataFrame(nouns_total.most_common(), columns=['noun', 'count'])\ndf.style.hide(axis=\"index\")\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_fc840\">\n  <thead>\n    <tr>\n      <th id=\"T_fc840_level0_col0\" class=\"col_heading level0 col0\" >noun</th>\n      <th id=\"T_fc840_level0_col1\" class=\"col_heading level0 col1\" >count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_fc840_row0_col0\" class=\"data row0 col0\" >condición</td>\n      <td id=\"T_fc840_row0_col1\" class=\"data row0 col1\" >1</td>\n    </tr>\n    <tr>\n      <td id=\"T_fc840_row1_col0\" class=\"data row1 col0\" >ejercicio</td>\n      <td id=\"T_fc840_row1_col1\" class=\"data row1 col1\" >1</td>\n    </tr>\n    <tr>\n      <td id=\"T_fc840_row2_col0\" class=\"data row2 col0\" >hidalgo</td>\n      <td id=\"T_fc840_row2_col1\" class=\"data row2 col1\" >1</td>\n    </tr>\n    <tr>\n      <td id=\"T_fc840_row3_col0\" class=\"data row3 col0\" >don</td>\n      <td id=\"T_fc840_row3_col1\" class=\"data row3 col1\" >1</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nEn nuestro texto completo:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nnouns = []\nfor token in nlp(text):\n    if token.pos_ == 'NOUN':\n        nouns.append(token.lemma_)\n\nnouns_total = Counter(nouns)\n\ndf = pd.DataFrame(nouns_total.most_common(), columns=['token', 'frecuencia'])\ndf[:5].style.hide(axis=\"index\")\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_5d0f7\">\n  <thead>\n    <tr>\n      <th id=\"T_5d0f7_level0_col0\" class=\"col_heading level0 col0\" >token</th>\n      <th id=\"T_5d0f7_level0_col1\" class=\"col_heading level0 col1\" >frecuencia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_5d0f7_row0_col0\" class=\"data row0 col0\" >caballero</td>\n      <td id=\"T_5d0f7_row0_col1\" class=\"data row0 col1\" >61</td>\n    </tr>\n    <tr>\n      <td id=\"T_5d0f7_row1_col0\" class=\"data row1 col0\" >don</td>\n      <td id=\"T_5d0f7_row1_col1\" class=\"data row1 col1\" >56</td>\n    </tr>\n    <tr>\n      <td id=\"T_5d0f7_row2_col0\" class=\"data row2 col0\" >libro</td>\n      <td id=\"T_5d0f7_row2_col1\" class=\"data row2 col1\" >48</td>\n    </tr>\n    <tr>\n      <td id=\"T_5d0f7_row3_col0\" class=\"data row3 col0\" >señor</td>\n      <td id=\"T_5d0f7_row3_col1\" class=\"data row3 col1\" >38</td>\n    </tr>\n    <tr>\n      <td id=\"T_5d0f7_row4_col0\" class=\"data row4 col0\" >cura</td>\n      <td id=\"T_5d0f7_row4_col1\" class=\"data row4 col1\" >33</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Selección de cualqueir categoría gramatical\n\nConsultamos la Universal POS tags y definimos la categoría que queremos extraer.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code code-fold=\"false\"}\ncategoria = 'ADV'\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nlista_categoria = []\nfor token in nlp(text):\n    if token.pos_ == categoria:\n        lista_categoria.append(token.lemma_)\n\ncategoria_total = Counter(lista_categoria)\n\ndf = pd.DataFrame(categoria_total.most_common(), columns=['token', 'frecuencia'])\ndf[:5].style.hide(axis=\"index\")\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_4d8cb\">\n  <thead>\n    <tr>\n      <th id=\"T_4d8cb_level0_col0\" class=\"col_heading level0 col0\" >token</th>\n      <th id=\"T_4d8cb_level0_col1\" class=\"col_heading level0 col1\" >frecuencia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_4d8cb_row0_col0\" class=\"data row0 col0\" >no</td>\n      <td id=\"T_4d8cb_row0_col1\" class=\"data row0 col1\" >186</td>\n    </tr>\n    <tr>\n      <td id=\"T_4d8cb_row1_col0\" class=\"data row1 col0\" >más</td>\n      <td id=\"T_4d8cb_row1_col1\" class=\"data row1 col1\" >61</td>\n    </tr>\n    <tr>\n      <td id=\"T_4d8cb_row2_col0\" class=\"data row2 col0\" >tanto</td>\n      <td id=\"T_4d8cb_row2_col1\" class=\"data row2 col1\" >50</td>\n    </tr>\n    <tr>\n      <td id=\"T_4d8cb_row3_col0\" class=\"data row3 col0\" >así</td>\n      <td id=\"T_4d8cb_row3_col1\" class=\"data row3 col1\" >44</td>\n    </tr>\n    <tr>\n      <td id=\"T_4d8cb_row4_col0\" class=\"data row4 col0\" >mucho</td>\n      <td id=\"T_4d8cb_row4_col1\" class=\"data row4 col1\" >33</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## NER\n\nNamed-Entity Recognition.\n\nNER es el proceso de identificar entidades nombradas (como nombres de personas, lugares, organizaciones, etc.) en un texto. La biblioteca spaCy es particularmente útil para esta tarea.\n\nCada modelo de la librería spaCy tiene sus propias entidades, que se encuentran en la sección Label Scheme de la documentación del modelo. Para modelo cargado las entidades se almacenan con las etiqetas **LOC**, **ORG**, **PER** y **MISC**. (lugares, organizacoines, personas y un comodín para las tres anteriores)\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n#code-fold: false\ngetattr(nlp.get_pipe('ner'), 'labels')\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n('LOC', 'MISC', 'ORG', 'PER')\n```\n:::\n:::\n\n\n\nTodas las entidades nombradas se encuentran en la propiedad **document.ents**.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code code-fold=\"false\"}\ndocumento = nlp(text)\n```\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nfor named_entity in list(documento.ents)[:10]:\n    print(named_entity, named_entity.label_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nQue trata de la condición MISC\nhidalgo PER\nla Mancha LOC\nUna olla de algo más vaca MISC\nEl resto della MISC\nTenía en su casa una MISC\nFrisaba LOC\nQuieren PER\nQuijada PER\nQuesada LOC\n```\n:::\n:::\n\n\n### Búsqueda de una entidad en el documento\n\nPodemos encontrar una entidad dentro de su propio contexto.\n\niba aquí\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nget_ner_in_context('hidalgo', nlp(quijote), desired_ner_labels = False)\n```\n\n::: {.cell-output .cell-output-display}\n**Resultado 1.**\n:::\n\n::: {.cell-output .cell-output-display}\nTipo de entidad: **PER**\n:::\n\n::: {.cell-output .cell-output-display}\nContexto:\n:::\n\n::: {.cell-output .cell-output-display}\nQue trata de la condición y ejercicio del famoso **hidalgo**\r don Quijote de la Mancha\r \r En un lugar de la Mancha, de cuyo nombre no quiero acordarme, no ha mucho\r tiempo que vivía un **hidalgo** de los de lanza en astillero, adarga antigua,\r rocín flaco y galgo corredor.\n:::\n\n::: {.cell-output .cell-output-display}\n**Resultado 2.**\n:::\n\n::: {.cell-output .cell-output-display}\nTipo de entidad: **PER**\n:::\n\n::: {.cell-output .cell-output-display}\nContexto:\n:::\n\n::: {.cell-output .cell-output-display}\nEl labrador estaba admirado oyendo aquellos disparates; y, quitándole la\r visera, que ya estaba hecha pedazos de los palos, le limpió el rostro, que\r le tenía cubierto de polvo; y apenas le hubo limpiado, cuando le conoció y\r le dijo:\r \r — Señor Quijana —que así se debía de llamar cuando él tenía juicio y no\r había pasado de **hidalgo** sosegado a caballero andante—, ¿quién ha puesto a\r vuestra merced desta suerte?\r \r Pero él seguía con su romance a cuanto le preguntaba.\n:::\n\n::: {.cell-output .cell-output-display}\n**Resultado 3.**\n:::\n\n::: {.cell-output .cell-output-display}\nTipo de entidad: **PER**\n:::\n\n::: {.cell-output .cell-output-display}\nContexto:\n:::\n\n::: {.cell-output .cell-output-display}\nA esto respondió el labrador:\r \r — Mire vuestra merced, señor, pecador de mí, que yo no soy don Rodrigo de\r Narváez, ni el marqués de Mantua, sino Pedro Alonso, su vecino; ni vuestra\r merced es Valdovinos, ni Abindarráez, sino el honrado **hidalgo del señor**\r Quijana.\r \r \n:::\n:::\n\n\n### Visualizers\n\n[https://spacy.io/usage/visualizers](https://spacy.io/usage/visualizers)\n\nPodemos usar sus demos online que actualmente usan la versión small del modelo en español.\n\n- [https://demos.explosion.ai/displacy](https://demos.explosion.ai/displacy?text=Cuando%20Mario%20empez%C3%B3%20a%20trabajar%20en%20este%20pipeline%2C%20poca%20gente%20imaginaba%20el%20alcance.&model=es_core_news_sm&cpu=1&cph=1)\n- [https://demos.explosion.ai/displacy-ent](https://demos.explosion.ai/displacy-ent?text=Cuando%20Mario%20empez%C3%B3%20a%20trabajar%20en%20este%20pipeline%2C%20poca%20gente%20imaginaba%20el%20alcance.&model=es_core_news_sm&ents=person%2Cnorp%2Cfacility%2Corg%2Cgpe%2Cloc%2Cproduct%2Cevent%2Cwork_of_art%2Clanguage%2Cdate%2Ctime%2Cpercent%2Cmoney%2Cquantity%2Cordinal%2Ccardinal%2Cmisc%2Cdrv%2Cevt%2Cgpe_loc%2Cgpe_org%2Cprod%2Cper)\n\n#### Dependency parse\n\nAnálisis sintáctico de dependencia. Es el visualizador por defecto si no especificamos ningún estilo.\n\nVisualizamos el texto ```Cuando Mario empezó a trabajar en este pipeline, poca gente imaginaba el alcance.``` como ejemplo.\n\n\n\n::: {.cell width='50 %' execution_count=27}\n``` {.python .cell-code code-fold=\"false\"}\n# options: https://spacy.io/api/top-level#options-dep\noptions = {\"compact\": True,\n           \"color\": \"green\",\n           \"bg:\": \"red\", # no hace caso\n           \"arrow_width\": 5,\n           \"word_spacing\": 20,\n           \"distance\": 120}\n\ndoc = nlp(text_for_visual)\ndisplacy.render(doc, options=options) # = displacy.render(doc, style=\"dep\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"es\" id=\"778eda4a5bc0460d8a1a2eb829361407-0\" class=\"displacy\" width=\"1610\" height=\"302.0\" direction=\"ltr\" style=\"max-width: none; height: 302.0px; color: green; background: #ffffff; font-family: Arial; direction: ltr\">\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">Cuando</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">SCONJ</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"170\">Mario</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"170\">PROPN</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"290\">empezó</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"290\">VERB</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"410\">a</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"410\">ADP</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"530\">trabajar</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"530\">VERB</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"650\">en</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"650\">ADP</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"770\">este</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"770\">DET</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"890\">pipeline,</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"890\">NOUN</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"1010\">poca</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"1010\">DET</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"1130\">gente</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"1130\">NOUN</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"1250\">imaginaba</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"1250\">VERB</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"1370\">el</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"1370\">DET</tspan>\n</text>\n\n<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"262.0\">\n    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"1490\">alcance.</tspan>\n    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"1490\">NOUN</tspan>\n</text>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-0\" stroke-width=\"2px\" d=\"M62,242.0 62,202.0 284.0,202.0 284.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">mark</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M62,244.0 L59,237.0 65,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-1\" stroke-width=\"2px\" d=\"M182,242.0 182,222.0 281.0,222.0 281.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M182,244.0 L179,237.0 185,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-2\" stroke-width=\"2px\" d=\"M302,242.0 302,162.0 1250.0,162.0 1250.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">advcl</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M302,244.0 L299,237.0 305,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-3\" stroke-width=\"2px\" d=\"M422,242.0 422,222.0 521.0,222.0 521.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">mark</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M422,244.0 L419,237.0 425,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-4\" stroke-width=\"2px\" d=\"M302,242.0 302,202.0 524.0,202.0 524.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-4\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">xcomp</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M524.0,244.0 L527.0,237.0 521.0,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-5\" stroke-width=\"2px\" d=\"M662,242.0 662,202.0 884.0,202.0 884.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-5\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">case</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M662,244.0 L659,237.0 665,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-6\" stroke-width=\"2px\" d=\"M782,242.0 782,222.0 881.0,222.0 881.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-6\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M782,244.0 L779,237.0 785,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-7\" stroke-width=\"2px\" d=\"M302,242.0 302,182.0 887.0,182.0 887.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-7\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">obl</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M887.0,244.0 L890.0,237.0 884.0,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-8\" stroke-width=\"2px\" d=\"M1022,242.0 1022,222.0 1121.0,222.0 1121.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-8\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M1022,244.0 L1019,237.0 1025,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-9\" stroke-width=\"2px\" d=\"M1142,242.0 1142,222.0 1241.0,222.0 1241.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-9\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M1142,244.0 L1139,237.0 1145,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-10\" stroke-width=\"2px\" d=\"M1382,242.0 1382,222.0 1481.0,222.0 1481.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-10\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M1382,244.0 L1379,237.0 1385,237.0\" fill=\"currentColor\"/>\n</g>\n\n<g class=\"displacy-arrow\">\n    <path class=\"displacy-arc\" id=\"arrow-778eda4a5bc0460d8a1a2eb829361407-0-11\" stroke-width=\"2px\" d=\"M1262,242.0 1262,202.0 1484.0,202.0 1484.0,242.0\" fill=\"none\" stroke=\"currentColor\"/>\n    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n        <textPath xlink:href=\"#arrow-778eda4a5bc0460d8a1a2eb829361407-0-11\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">obj</textPath>\n    </text>\n    <path class=\"displacy-arrowhead\" d=\"M1484.0,244.0 L1487.0,237.0 1481.0,237.0\" fill=\"currentColor\"/>\n</g>\n</svg></span>\n```\n:::\n:::\n\n\n\n#### Entity recognizer\n\nVisualizando el reconocedor de entidades.\n\nUsamos dos modelos distintos. Cada uno cuenta con sus propias entidades identificadas en el Label Scheme de cada modelo.\n\nVisualizamos el texto ```María se fue en 2020 al río Guadiana a pescar peces coloridos mientras Mario iban a por bebida al supermercado Mercado.``` como ejemplo.\n\n- El primer modelo, [es_core_news_md](https://spacy.io/models/es#es_core_news_md), el que hemos estado usando hasta ahora. Con cuatro entidades NER: LOC, MISC, ORG y PER.\n\n\n\n::: {.cell width='50 %' execution_count=30}\n``` {.python .cell-code code-fold=\"false\"}\n# options: https://spacy.io/api/top-level#displacy_options-ent\n\ncolors = {\"PER\": \"linear-gradient(90deg, #aa9cfc, #fc9ce7)\",\n          \"LOC\": \"linear-gradient(90deg, orange, lightblue)\"}\noptions = {#\"ents\": [\"PER\"], # si quisiéramos especificar las entidades que queremos mostrar\n           \"colors\": colors}\n\ndoc = nlp(text_for_visual)\n#displacy.server(doc, style=\"ent\", options=options, auto_select_port=True)\ndisplacy.render(doc, style=\"ent\", options=options)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n<mark class=\"entity\" style=\"background: linear-gradient(90deg, #aa9cfc, #fc9ce7); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    María\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PER</span>\n</mark>\n se fue en 2020 al río \n<mark class=\"entity\" style=\"background: linear-gradient(90deg, orange, lightblue); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    Guadiana\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">LOC</span>\n</mark>\n a pescar peces coloridos mientras \n<mark class=\"entity\" style=\"background: linear-gradient(90deg, #aa9cfc, #fc9ce7); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    Mario\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PER</span>\n</mark>\n iban a por bebida al supermercado \n<mark class=\"entity\" style=\"background: linear-gradient(90deg, orange, lightblue); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    Mercado\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">LOC</span>\n</mark>\n.</div></span>\n```\n:::\n:::\n\n\n- El segundo modelo, [en_core_web_sm](https://spacy.io/models/en#en_core_web_sm), en inglés. Con muchas más entidades con NER: CARDINAL, DATE, ..., WORK_OF_ART\n\n::: {.cell width='50 %' execution_count=31}\n``` {.python .cell-code code-fold=\"false\"}\n# options: https://spacy.io/api/top-level#displacy_options-ent\n\ncolors = {\"PERSON\": \"linear-gradient(90deg, #aa9cfc, #fc9ce7)\",\n          \"DATE\": \"linear-gradient(90deg, white, green)\",\n          \"GPE\": \"linear-gradient(90deg, orange, lightblue)\"}\noptions = {#\"ents\": [\"PER\"], # si quisiéramos especificar las entidades que queremos mostrar\n           \"colors\": colors}\n\nnlp_en = spacy.load(\"en_core_web_sm\")\ndoc = nlp_en(text_for_visual)\ndisplacy.render(doc, style=\"ent\", options=options)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n<mark class=\"entity\" style=\"background: linear-gradient(90deg, #aa9cfc, #fc9ce7); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    María se fue\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n</mark>\n en \n<mark class=\"entity\" style=\"background: linear-gradient(90deg, white, green); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    2020\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">DATE</span>\n</mark>\n \n<mark class=\"entity\" style=\"background: linear-gradient(90deg, #aa9cfc, #fc9ce7); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    al río Guadiana\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n</mark>\n a pescar peces coloridos mientras \n<mark class=\"entity\" style=\"background: linear-gradient(90deg, #aa9cfc, #fc9ce7); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    Mario\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n</mark>\n iban a por bebida \n<mark class=\"entity\" style=\"background: linear-gradient(90deg, #aa9cfc, #fc9ce7); padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n    al supermercado Mercado\n    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n</mark>\n.</div></span>\n```\n:::\n:::\n\n\n### Selección de un tipo de entidad\n\nPodemos identificar el tipo de entidades que queremos buscar.\n\n<span style=\"text-decoration:underline\">**Ejemplo.**</span>\n\nLOC\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nprint(f\"{nlp(text).ents[2]} - {repr(nlp(text).ents[2].label_)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nla Mancha - 'LOC'\n```\n:::\n:::\n\n\n<span style=\"text-decoration:underline\">**Ejemplo.**</span>\n\nPER\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\npers = []\nfor named_entity in nlp(text).ents:\n    if named_entity.label_  == 'PER':\n        pers.append(named_entity.lemma_)\n\npers_total = Counter(pers)\n\ndf = pd.DataFrame(pers_total.most_common(), columns=['named_entity', 'frecuencia'])\ndf[:6]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>named_entity</th>\n      <th>frecuencia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrés</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nicolás</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>señor caballero</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Amadís de Gaula</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Amadís</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Rocinante</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Diferencia entre POS y NER\n\nPodemos ver la diferencia entre POS y NER con el siguiente ejemplo.\n\n<span style=\"text-decoration:underline\">**Ejemplo.**</span>\n\n```María se fue en 2020 al río Guadiana a pescar peces coloridos mientras Mario iban a por bebida al supermercado Mercado.```\n\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\npropiedades = ['text', 'pos_']\n\nprint('POS')\nfor token in ejemplo[:6]:\n    print('---')\n    for attr in propiedades:\n        print(\"obj.%s = %r\" % (attr, getattr(token, attr)))\n\n\nprint('NER')\nprint('---')\nfor named_entity in list(ejemplo.ents):\n   print(f\"{named_entity} - label: {repr(named_entity.label_)}\")\n```\n:::\n\n\n::: {.cell execution_count=36}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<div style=\"display: flex; justify-content: space-between;\">\n    <div style=\"margin-right: 20px; flex: 1;\">\n        <pre>POS<br>---<br>obj.text = 'María'<br>obj.pos_ = 'PROPN'<br>---<br>obj.text = 'se'<br>obj.pos_ = 'PRON'<br>---<br>obj.text = 'fue'<br>obj.pos_ = 'VERB'<br>---<br>obj.text = 'en'<br>obj.pos_ = 'ADP'<br>---<br>obj.text = '2020'<br>obj.pos_ = 'NOUN'<br>---<br>obj.text = 'al'<br>obj.pos_ = 'ADP'</pre>\n    </div>\n    <div style=\"flex: 1;\">\n        <pre>NER<br>---<br>María - label: 'PER'<br>Guadiana - label: 'LOC'<br>Mario - label: 'PER'<br>Mercado - label: 'LOC'</pre>\n    </div>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}